***Array***
Em Python, não há uma estrutura de dados chamada "array" no sentido tradicional. 
Em vez disso, você usa listas para criar uma coleção de elementos.

- Não é um tipo de dados nativo em Python.
- Pode ser implementado usando bibliotecas como NumPy.
- É uma estrutura de dados que armazena elementos em uma ordem específica, semelhante a uma lista, mas com tamanho fixo.
   
***Listas***
 Uma lista em Python é uma coleção ordenada e mutável de elementos. Ela pode conter qualquer tipo de dado, incluindo números, strings, objetos, outras listas, etc.
Listas são definidas usando colchetes [] e os elementos são separados por vírgulas. Como por exemplo: "minha_lista = [1, 2, 3, 4, 5]"

- Uma estrutura de dados nativa em Python.
- Armazena uma coleção ordenada de elementos mutáveis.
- Os elementos podem ser acessados por índice, começando em 0.

***Tuplas***
Semelhantes às listas, as tuplas são coleções ordenadas de elementos, mas são imutáveis, ou seja, seus elementos não podem ser alterados após a criação.
Tuplas são definidas usando parênteses ().

- Outra estrutura de dados nativa em Python.
- Semelhante a listas, mas imutável, ou seja, seus elementos não podem ser alterados após a criação.
- Usadas quando se deseja criar coleções de elementos que não devem ser modificados.

***Dicionários***
Dicionários em Python são estruturas de dados que armazenam pares chave-valor, onde cada chave é única.
Eles são definidos usando chaves {} e são eficientes para mapear informações.

- Uma estrutura de dados nativa em Python.
- Armazena pares chave-valor, onde cada chave é única.
- Permite a recuperação eficiente de valores usando suas chaves, em vez de índices.

***Sets***
Sets em Python são coleções não ordenadas de elementos únicos.
Eles são definidos usando chaves {} ou a função set() e são usados para eliminar duplicatas e verificar a existência de elementos em uma coleção.

- Uma estrutura de dados nativa em Python.
- Armazena uma coleção não ordenada de elementos únicos.
- Usados quando se deseja eliminar duplicatas de uma coleção ou verificar a presença de um elemento em tempo constante.

***Index***
Em Python, os índices são usados para acessar elementos em listas, tuplas e strings.
Os índices geralmente começam em 0 e permitem acessar elementos específicos da coleção, usando colchetes [].

- A indexação em Python refere-se à capacidade de acessar elementos em uma coleção (como uma lista ou tupla) usando um número inteiro chamado índice.
- Os índices geralmente começam em 0 para a maioria das coleções em Python.
- Permite a recuperação específica de elementos em uma coleção, facilitando a manipulação dos dados.
